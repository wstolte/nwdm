[["index.html", "North Sea and Wadden Sea model validation database at Deltares 1 Background", " North Sea and Wadden Sea model validation database at Deltares Willem Stolte 2022-12-22 1 Background Several projects have a need for model validation data for the (Greater) North Sea. Current modeling efforts comprise hydrodynamics, sediment, water quality and ecological modeling. Validation data therefore comprise a large number of data from different origin, and different standards. The objective of this memo is to propose and agree on a common data format for validation data for North Sea models: both hydrodynamics, water quality and ecology. "],["workflow-description.html", "2 Workflow description 2.1 Data in 2.2 Harmonization of data sources 2.3 Data out 2.4 Locations 2.5 Metadata: Combination of locations and parameters 2.6 Observations", " 2 Workflow description Data from different sources are retrieved, harmonized and stored locally in a PostGreSQL/PostGIS database. This is done by scripting, so that it is easy to update. Data are then made available via a Geoserver for easy retrieval by users. For use in validation scripts, the data can be queried and downloaded in a ready-to-use form via scripting in Matlab, Python or R. This document describes this process. 2.1 Data in NWDM includes North Sea observation data intended for model validation. typeName = &quot;NWDM:data_owner&quot; url = create_url(cql_list = NULL, typeName = typeName, maxFeatures = NULL, outputFormat = &quot;application/json&quot;, username = nwdm$username, password = nwdm$password) st_read(url) %&gt;% st_drop_geometry() %&gt;% select(id) %&gt;% mutate(`data owner` = gsub(&quot;data_owner.&quot;, &quot;&quot;, id)) %&gt;% select(-id) %&gt;% knitr::kable(caption = &quot;Owners of data sources included in NWDM&quot;) ## Reading layer `OGRGeoJSON&#39; from data source ## `https://nwdm:tkofschip@nwdm.openearth.eu/geoserver/NWDM/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=NWDM%3Adata_owner&amp;outputFormat=application%2Fjson&#39; ## using driver `GeoJSON&#39; ## replacing null geometries with empty geometries ## Simple feature collection with 17 features and 2 fields (with 17 geometries empty) ## Geometry type: GEOMETRYCOLLECTION ## Dimension: XY ## Bounding box: xmin: NA ymin: NA xmax: NA ymax: NA ## Geodetic CRS: WGS 84 Table 2.1: Owners of data sources included in NWDM data owner PML NIOZ VLIZ Schlesswig-Holstein RBINS Danish MSFD database CEFAS IFREMER IMR MSS SMHI NLWKN SOCAT Rijkswaterstaat Macovei HZG EMODnet 2.2 Harmonization of data sources All data are harmonized to BODC vocabulary terms. Link to BODC vocabs 2.2.1 Background information on data The database uses parameter codes that were standardized by BODC (Britisch Oceanographic Data Center). Due to historical reasons there are two different parameter codes that the user needs to be aware of: P01 and P35. P01 parameter codes are very descriptive and very extensive and they are harmonized (to a certain extent) in the P35 parameter codes. Using the SeaDataNet website, one can search for the parameter codes available in both P01 and P35. PO1: https://vocab.seadatanet.org/v_bodc_vocab_v2/search.asp?lib=P01 P35: https://vocab.seadatanet.org/v_bodc_vocab_v2/search.asp?lib=P35 Within the database P01 parameter codes can be accessed via the column “parameter_code”, while P35 parameter codes are summarized in the column “p35code”. 2.3 Data out The Geoserver provides a Web Feature Service (WFS). The service is called by a URL. In the URL, specifications and criteria can be included. Geoserver can deliver different formats, e.g. csv text. This is shown in the next examples. Calling the URL starts the download of this csv file. The file can be downloaded to your local machine, or read directly into an object in your favourite scripting language Currently, the following tables are available in the Geoserver: knitr::include_graphics(&quot;c:/repos_checkouts/Wozep/NWDM/doc/nwdm layers.svg&quot;) Figure 2.1: Overview of all data sources, and Geoserver WFS layers (bold). 2.4 Locations Below is a map with all locations (excluding EMODnet and Ferrybox data) currently in the database. Data is read into an r dataframe using read_csv from the readr (tidyverse) package, converted to a spatial object, transformed to a suitable coordinate reference system for interactive plotting, and plotted using the leaflet library. typeName = &quot;NWDM:location&quot; url = create_url(cql_list = NULL, typeName = typeName, maxFeatures = NULL, outputFormat = &quot;application/json&quot;, username = nwdm$username, password = nwdm$password) locations &lt;- st_read(url) ## Reading layer `OGRGeoJSON&#39; from data source ## `https://nwdm:tkofschip@nwdm.openearth.eu/geoserver/NWDM/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=NWDM%3Alocation&amp;outputFormat=application%2Fjson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 82207 features and 13 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -15.266 ymin: 45.0135 xmax: 13.0367 ymax: 64.066 ## Geodetic CRS: WGS 84 locations %&gt;% sample_n(1000) %&gt;% leaflet::leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers(label = ~location_code, radius = 1) Figure 2.2: Random sample of 1000 locations in the NWDM database. 2.5 Metadata: Combination of locations and parameters All unique combinations of location and parameters. typeName = &quot;NWDM:measurement_p35_all_grid&quot; url = create_url(cql_list = NULL, typeName = typeName, outputFormat = &quot;application/json&quot;, maxFeatures = NULL, username = nwdm$username, password = nwdm$password ) parameters &lt;- st_read(url) typeName = &quot;NWDM:p35location_overview_emodnet&quot; url = create_url(cql_list = NULL, typeName = typeName, outputFormat = &quot;application/json&quot;, maxFeatures = NULL, username = nwdm$username, password = nwdm$password) parameters_emodnet &lt;- st_read(url) %&gt;% rename(p35preflabel = label) parameters %&gt;% bind_rows(parameters_emodnet) %&gt;% ggplot() + geom_sf() + facet_wrap(~ p35preflabel) # knitr::kable(head(parameters, 10)) 2.6 Observations This table should not be downloaded completely. It is big and will grow bigger over time, and it is unlikely that you will need the complete table. The table can be easily subsetted by a so-called CQL-query in the wfs request (url). This is described in the next part. "],["building-a-query.html", "3 Building a query 3.1 Select parameters and locations", " 3 Building a query In the query part, we can add an element called CQL-query. 3.1 Select parameters and locations Below is an example where only data are requested that contain data on “water body nitrate” at locations “DOOVBWT” (this is a station in the Wadden Sea) url = &quot;http://nwdm.openearth.eu/geoserver/NWDM/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=NWDM%3Ameasurement_view&amp;cql_filter=%28p35preflabel%3D%27Water%20body%20nitrate%27%20and%20location_code%3D%27DOOVBWT%27%29&amp;outputFormat=csv&quot; structure &lt;- httr::parse_url(url) knitr::kable(paste0(paste(names(structure),paste0(structure),sep=&quot;=&quot;))) x scheme=http hostname=nwdm.openearth.eu port=NULL path=geoserver/NWDM/ows query=list(service = “WFS”, version = “1.0.0”, request = “GetFeature”, typeName = “NWDM:measurement_view”, cql_filter = “(p35preflabel=‘Water body nitrate’ and location_code=‘DOOVBWT’)”, outputFormat = “csv”) params=NULL fragment=NULL username=NULL password=NULL "],["package-nwdm.html", "4 Package nwdm", " 4 Package nwdm To query the database, an r package is available. Install the package with devtools::install_github(“wstolte/nwdm”). require(lubridate) if(!require(nwdm)) { print(&quot;Package nwdm will be installed&quot;) devtools::install_github(&quot;wstolte/nwdm&quot;, force = T) require(nwdm) } else require(nwdm) cql_list = list( p35preflabel = &quot;Water body nitrate&quot; ) columns = c(&quot;location_code&quot;, &quot;date&quot;, &quot;depth&quot;, &quot;vertical_reference_code&quot;, &quot;parameter_label&quot;, &quot;value&quot;, &quot;unit_preflabel&quot;, &quot;quality_code&quot;, &quot;geom&quot; ) url = create_url(cql_list = cql_list, typeName = &quot;NWDM:measurement_p35_all_grid&quot;, maxFeatures = NULL, outputFormat = &quot;application/json&quot;, username = nwdm$username, password = nwdm$password) myData &lt;- st_read(url) ## Reading layer `OGRGeoJSON&#39; from data source ## `https://nwdm:tkofschip@nwdm.openearth.eu/geoserver/NWDM/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=NWDM%3Ameasurement_p35_all_grid&amp;cql_filter=%28p35preflabel%3D%27Water%20body%20nitrate%27%29&amp;outputFormat=application%2Fjson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 60129 features and 14 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -15.18 ymin: 48 xmax: 13.04 ymax: 64.06 ## Geodetic CRS: WGS 84 class(myData$median_value) ## [1] &quot;numeric&quot; pal = leaflet::colorNumeric(palette = rainbow(16), domain = myData$median_value[myData$median_value &lt; 1]) myData %&gt;% # head(10000) %&gt;% mutate(season = ifelse(month %in% c(3,4,5,6,7,8,9), &quot;summer&quot;, &quot;winter&quot;)) %&gt;% filter(year &gt; 2010) %&gt;% dplyr::filter(season == &quot;winter&quot;) %&gt;% leaflet() %&gt;% addTiles() %&gt;% addPolygons(fillColor = ~pal(median_value), stroke = F, color = ~pal(median_value)) %&gt;% leaflet::addLegend(pal = pal, values = myData$median_value[myData$median_value &lt; 1]) Figure 4.1: Example of seasonal variation of nitrate concentration at location DOOVBWT. # myData2 &lt;- myData %&gt;% head(10) %&gt;% # sf::st_simplify() # st_collection_extract(type = &quot;POLYGON&quot;) %&gt;% # st_centroid() "],["more-on-wfs.html", "5 More on WFS", " 5 More on WFS Full documentation is found here: https://docs.geoserver.org/latest/en/user/services/wfs/reference.html The capabilities of the used geoserver schema can be requested by: http://nwdm.openearth.eu/geoserver/NWDM/ows?service=WFS&amp;version=1.0.0&amp;request=GetCapabilities A description of the featuretypes (layers) can be requested by: http://nwdm.openearth.eu/geoserver/NWDM/wfs?request=DescribeFeatureType "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
